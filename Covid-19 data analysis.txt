{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0e568378",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Modules are imported.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import numpy as np \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt \n",
    "print('Modules are imported.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4cc051ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Long</th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>...</th>\n",
       "      <th>4/21/20</th>\n",
       "      <th>4/22/20</th>\n",
       "      <th>4/23/20</th>\n",
       "      <th>4/24/20</th>\n",
       "      <th>4/25/20</th>\n",
       "      <th>4/26/20</th>\n",
       "      <th>4/27/20</th>\n",
       "      <th>4/28/20</th>\n",
       "      <th>4/29/20</th>\n",
       "      <th>4/30/20</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1092</td>\n",
       "      <td>1176</td>\n",
       "      <td>1279</td>\n",
       "      <td>1351</td>\n",
       "      <td>1463</td>\n",
       "      <td>1531</td>\n",
       "      <td>1703</td>\n",
       "      <td>1828</td>\n",
       "      <td>1939</td>\n",
       "      <td>2171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Albania</td>\n",
       "      <td>41.153300</td>\n",
       "      <td>20.168300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>609</td>\n",
       "      <td>634</td>\n",
       "      <td>663</td>\n",
       "      <td>678</td>\n",
       "      <td>712</td>\n",
       "      <td>726</td>\n",
       "      <td>736</td>\n",
       "      <td>750</td>\n",
       "      <td>766</td>\n",
       "      <td>773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>28.033900</td>\n",
       "      <td>1.659600</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2811</td>\n",
       "      <td>2910</td>\n",
       "      <td>3007</td>\n",
       "      <td>3127</td>\n",
       "      <td>3256</td>\n",
       "      <td>3382</td>\n",
       "      <td>3517</td>\n",
       "      <td>3649</td>\n",
       "      <td>3848</td>\n",
       "      <td>4006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>42.506300</td>\n",
       "      <td>1.521800</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>717</td>\n",
       "      <td>723</td>\n",
       "      <td>723</td>\n",
       "      <td>731</td>\n",
       "      <td>738</td>\n",
       "      <td>738</td>\n",
       "      <td>743</td>\n",
       "      <td>743</td>\n",
       "      <td>743</td>\n",
       "      <td>745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Angola</td>\n",
       "      <td>-11.202700</td>\n",
       "      <td>17.873900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>24</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Western Sahara</td>\n",
       "      <td>24.215500</td>\n",
       "      <td>-12.885800</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Sao Tome and Principe</td>\n",
       "      <td>0.186360</td>\n",
       "      <td>6.613081</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>15.552727</td>\n",
       "      <td>48.516388</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Comoros</td>\n",
       "      <td>-11.645500</td>\n",
       "      <td>43.333300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Tajikistan</td>\n",
       "      <td>38.861034</td>\n",
       "      <td>71.276093</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>266 rows Ã— 104 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Province/State         Country/Region        Lat       Long  1/22/20  \\\n",
       "0              NaN            Afghanistan  33.000000  65.000000        0   \n",
       "1              NaN                Albania  41.153300  20.168300        0   \n",
       "2              NaN                Algeria  28.033900   1.659600        0   \n",
       "3              NaN                Andorra  42.506300   1.521800        0   \n",
       "4              NaN                 Angola -11.202700  17.873900        0   \n",
       "..             ...                    ...        ...        ...      ...   \n",
       "261            NaN         Western Sahara  24.215500 -12.885800        0   \n",
       "262            NaN  Sao Tome and Principe   0.186360   6.613081        0   \n",
       "263            NaN                  Yemen  15.552727  48.516388        0   \n",
       "264            NaN                Comoros -11.645500  43.333300        0   \n",
       "265            NaN             Tajikistan  38.861034  71.276093        0   \n",
       "\n",
       "     1/23/20  1/24/20  1/25/20  1/26/20  1/27/20  ...  4/21/20  4/22/20  \\\n",
       "0          0        0        0        0        0  ...     1092     1176   \n",
       "1          0        0        0        0        0  ...      609      634   \n",
       "2          0        0        0        0        0  ...     2811     2910   \n",
       "3          0        0        0        0        0  ...      717      723   \n",
       "4          0        0        0        0        0  ...       24       25   \n",
       "..       ...      ...      ...      ...      ...  ...      ...      ...   \n",
       "261        0        0        0        0        0  ...        6        6   \n",
       "262        0        0        0        0        0  ...        4        4   \n",
       "263        0        0        0        0        0  ...        1        1   \n",
       "264        0        0        0        0        0  ...        0        0   \n",
       "265        0        0        0        0        0  ...        0        0   \n",
       "\n",
       "     4/23/20  4/24/20  4/25/20  4/26/20  4/27/20  4/28/20  4/29/20  4/30/20  \n",
       "0       1279     1351     1463     1531     1703     1828     1939     2171  \n",
       "1        663      678      712      726      736      750      766      773  \n",
       "2       3007     3127     3256     3382     3517     3649     3848     4006  \n",
       "3        723      731      738      738      743      743      743      745  \n",
       "4         25       25       25       26       27       27       27       27  \n",
       "..       ...      ...      ...      ...      ...      ...      ...      ...  \n",
       "261        6        6        6        6        6        6        6        6  \n",
       "262        4        4        4        4        4        8        8       14  \n",
       "263        1        1        1        1        1        1        6        6  \n",
       "264        0        0        0        0        0        0        0        1  \n",
       "265        0        0        0        0        0        0        0       15  \n",
       "\n",
       "[266 rows x 104 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_dataset_csv = pd.read_csv(\"C:/Users/hp/OneDrive/Desktop/covid19_Confirmed_dataset.csv\")\n",
    "corona_dataset_csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3a7b9267",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['Lat' 'Long'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-40-5a5d6969b5ab>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mcorona_dataset_csv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Lat\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"Long\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   4306\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[1;36m1.0\u001b[0m     \u001b[1;36m0.8\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4307\u001b[0m         \"\"\"\n\u001b[1;32m-> 4308\u001b[1;33m         return super().drop(\n\u001b[0m\u001b[0;32m   4309\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4310\u001b[0m             \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   4151\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4152\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 4153\u001b[1;33m                 \u001b[0mobj\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4154\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4155\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[1;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[0;32m   4186\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4187\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 4188\u001b[1;33m                 \u001b[0mnew_axis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4189\u001b[0m             \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4190\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, errors)\u001b[0m\n\u001b[0;32m   5589\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0many\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5590\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[1;34m\"ignore\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5591\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5592\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5593\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"['Lat' 'Long'] not found in axis\""
     ]
    }
   ],
   "source": [
    "corona_dataset_csv.drop([\"Lat\", \"Long\"],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d4e87b1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "corona_dataset_aggregate = corona_dataset_csv.groupby(\"Country/Region\").sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5748e1c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>1/28/20</th>\n",
       "      <th>1/29/20</th>\n",
       "      <th>...</th>\n",
       "      <th>4/21/20</th>\n",
       "      <th>4/22/20</th>\n",
       "      <th>4/23/20</th>\n",
       "      <th>4/24/20</th>\n",
       "      <th>4/25/20</th>\n",
       "      <th>4/26/20</th>\n",
       "      <th>4/27/20</th>\n",
       "      <th>4/28/20</th>\n",
       "      <th>4/29/20</th>\n",
       "      <th>4/30/20</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1092</td>\n",
       "      <td>1176</td>\n",
       "      <td>1279</td>\n",
       "      <td>1351</td>\n",
       "      <td>1463</td>\n",
       "      <td>1531</td>\n",
       "      <td>1703</td>\n",
       "      <td>1828</td>\n",
       "      <td>1939</td>\n",
       "      <td>2171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Albania</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>609</td>\n",
       "      <td>634</td>\n",
       "      <td>663</td>\n",
       "      <td>678</td>\n",
       "      <td>712</td>\n",
       "      <td>726</td>\n",
       "      <td>736</td>\n",
       "      <td>750</td>\n",
       "      <td>766</td>\n",
       "      <td>773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2811</td>\n",
       "      <td>2910</td>\n",
       "      <td>3007</td>\n",
       "      <td>3127</td>\n",
       "      <td>3256</td>\n",
       "      <td>3382</td>\n",
       "      <td>3517</td>\n",
       "      <td>3649</td>\n",
       "      <td>3848</td>\n",
       "      <td>4006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>717</td>\n",
       "      <td>723</td>\n",
       "      <td>723</td>\n",
       "      <td>731</td>\n",
       "      <td>738</td>\n",
       "      <td>738</td>\n",
       "      <td>743</td>\n",
       "      <td>743</td>\n",
       "      <td>743</td>\n",
       "      <td>745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Angola</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>24</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Western Sahara</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Sao Tome and Principe</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Comoros</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Tajikistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>266 rows Ã— 102 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Province/State         Country/Region  1/22/20  1/23/20  1/24/20  1/25/20  \\\n",
       "0              NaN            Afghanistan        0        0        0        0   \n",
       "1              NaN                Albania        0        0        0        0   \n",
       "2              NaN                Algeria        0        0        0        0   \n",
       "3              NaN                Andorra        0        0        0        0   \n",
       "4              NaN                 Angola        0        0        0        0   \n",
       "..             ...                    ...      ...      ...      ...      ...   \n",
       "261            NaN         Western Sahara        0        0        0        0   \n",
       "262            NaN  Sao Tome and Principe        0        0        0        0   \n",
       "263            NaN                  Yemen        0        0        0        0   \n",
       "264            NaN                Comoros        0        0        0        0   \n",
       "265            NaN             Tajikistan        0        0        0        0   \n",
       "\n",
       "     1/26/20  1/27/20  1/28/20  1/29/20  ...  4/21/20  4/22/20  4/23/20  \\\n",
       "0          0        0        0        0  ...     1092     1176     1279   \n",
       "1          0        0        0        0  ...      609      634      663   \n",
       "2          0        0        0        0  ...     2811     2910     3007   \n",
       "3          0        0        0        0  ...      717      723      723   \n",
       "4          0        0        0        0  ...       24       25       25   \n",
       "..       ...      ...      ...      ...  ...      ...      ...      ...   \n",
       "261        0        0        0        0  ...        6        6        6   \n",
       "262        0        0        0        0  ...        4        4        4   \n",
       "263        0        0        0        0  ...        1        1        1   \n",
       "264        0        0        0        0  ...        0        0        0   \n",
       "265        0        0        0        0  ...        0        0        0   \n",
       "\n",
       "     4/24/20  4/25/20  4/26/20  4/27/20  4/28/20  4/29/20  4/30/20  \n",
       "0       1351     1463     1531     1703     1828     1939     2171  \n",
       "1        678      712      726      736      750      766      773  \n",
       "2       3127     3256     3382     3517     3649     3848     4006  \n",
       "3        731      738      738      743      743      743      745  \n",
       "4         25       25       26       27       27       27       27  \n",
       "..       ...      ...      ...      ...      ...      ...      ...  \n",
       "261        6        6        6        6        6        6        6  \n",
       "262        4        4        4        4        8        8       14  \n",
       "263        1        1        1        1        1        6        6  \n",
       "264        0        0        0        0        0        0        1  \n",
       "265        0        0        0        0        0        0       15  \n",
       "\n",
       "[266 rows x 102 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_dataset_csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "62421fb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>1/28/20</th>\n",
       "      <th>1/29/20</th>\n",
       "      <th>1/30/20</th>\n",
       "      <th>1/31/20</th>\n",
       "      <th>...</th>\n",
       "      <th>4/21/20</th>\n",
       "      <th>4/22/20</th>\n",
       "      <th>4/23/20</th>\n",
       "      <th>4/24/20</th>\n",
       "      <th>4/25/20</th>\n",
       "      <th>4/26/20</th>\n",
       "      <th>4/27/20</th>\n",
       "      <th>4/28/20</th>\n",
       "      <th>4/29/20</th>\n",
       "      <th>4/30/20</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1092</td>\n",
       "      <td>1176</td>\n",
       "      <td>1279</td>\n",
       "      <td>1351</td>\n",
       "      <td>1463</td>\n",
       "      <td>1531</td>\n",
       "      <td>1703</td>\n",
       "      <td>1828</td>\n",
       "      <td>1939</td>\n",
       "      <td>2171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>609</td>\n",
       "      <td>634</td>\n",
       "      <td>663</td>\n",
       "      <td>678</td>\n",
       "      <td>712</td>\n",
       "      <td>726</td>\n",
       "      <td>736</td>\n",
       "      <td>750</td>\n",
       "      <td>766</td>\n",
       "      <td>773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2811</td>\n",
       "      <td>2910</td>\n",
       "      <td>3007</td>\n",
       "      <td>3127</td>\n",
       "      <td>3256</td>\n",
       "      <td>3382</td>\n",
       "      <td>3517</td>\n",
       "      <td>3649</td>\n",
       "      <td>3848</td>\n",
       "      <td>4006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>717</td>\n",
       "      <td>723</td>\n",
       "      <td>723</td>\n",
       "      <td>731</td>\n",
       "      <td>738</td>\n",
       "      <td>738</td>\n",
       "      <td>743</td>\n",
       "      <td>743</td>\n",
       "      <td>743</td>\n",
       "      <td>745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>24</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Bank and Gaza</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>466</td>\n",
       "      <td>474</td>\n",
       "      <td>480</td>\n",
       "      <td>484</td>\n",
       "      <td>342</td>\n",
       "      <td>342</td>\n",
       "      <td>342</td>\n",
       "      <td>343</td>\n",
       "      <td>344</td>\n",
       "      <td>344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Western Sahara</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yemen</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zambia</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>70</td>\n",
       "      <td>74</td>\n",
       "      <td>76</td>\n",
       "      <td>84</td>\n",
       "      <td>84</td>\n",
       "      <td>88</td>\n",
       "      <td>88</td>\n",
       "      <td>95</td>\n",
       "      <td>97</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zimbabwe</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28</td>\n",
       "      <td>28</td>\n",
       "      <td>28</td>\n",
       "      <td>29</td>\n",
       "      <td>31</td>\n",
       "      <td>31</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>187 rows Ã— 100 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    1/22/20  1/23/20  1/24/20  1/25/20  1/26/20  1/27/20  \\\n",
       "Country/Region                                                             \n",
       "Afghanistan               0        0        0        0        0        0   \n",
       "Albania                   0        0        0        0        0        0   \n",
       "Algeria                   0        0        0        0        0        0   \n",
       "Andorra                   0        0        0        0        0        0   \n",
       "Angola                    0        0        0        0        0        0   \n",
       "...                     ...      ...      ...      ...      ...      ...   \n",
       "West Bank and Gaza        0        0        0        0        0        0   \n",
       "Western Sahara            0        0        0        0        0        0   \n",
       "Yemen                     0        0        0        0        0        0   \n",
       "Zambia                    0        0        0        0        0        0   \n",
       "Zimbabwe                  0        0        0        0        0        0   \n",
       "\n",
       "                    1/28/20  1/29/20  1/30/20  1/31/20  ...  4/21/20  4/22/20  \\\n",
       "Country/Region                                          ...                     \n",
       "Afghanistan               0        0        0        0  ...     1092     1176   \n",
       "Albania                   0        0        0        0  ...      609      634   \n",
       "Algeria                   0        0        0        0  ...     2811     2910   \n",
       "Andorra                   0        0        0        0  ...      717      723   \n",
       "Angola                    0        0        0        0  ...       24       25   \n",
       "...                     ...      ...      ...      ...  ...      ...      ...   \n",
       "West Bank and Gaza        0        0        0        0  ...      466      474   \n",
       "Western Sahara            0        0        0        0  ...        6        6   \n",
       "Yemen                     0        0        0        0  ...        1        1   \n",
       "Zambia                    0        0        0        0  ...       70       74   \n",
       "Zimbabwe                  0        0        0        0  ...       28       28   \n",
       "\n",
       "                    4/23/20  4/24/20  4/25/20  4/26/20  4/27/20  4/28/20  \\\n",
       "Country/Region                                                             \n",
       "Afghanistan            1279     1351     1463     1531     1703     1828   \n",
       "Albania                 663      678      712      726      736      750   \n",
       "Algeria                3007     3127     3256     3382     3517     3649   \n",
       "Andorra                 723      731      738      738      743      743   \n",
       "Angola                   25       25       25       26       27       27   \n",
       "...                     ...      ...      ...      ...      ...      ...   \n",
       "West Bank and Gaza      480      484      342      342      342      343   \n",
       "Western Sahara            6        6        6        6        6        6   \n",
       "Yemen                     1        1        1        1        1        1   \n",
       "Zambia                   76       84       84       88       88       95   \n",
       "Zimbabwe                 28       29       31       31       32       32   \n",
       "\n",
       "                    4/29/20  4/30/20  \n",
       "Country/Region                        \n",
       "Afghanistan            1939     2171  \n",
       "Albania                 766      773  \n",
       "Algeria                3848     4006  \n",
       "Andorra                 743      745  \n",
       "Angola                   27       27  \n",
       "...                     ...      ...  \n",
       "West Bank and Gaza      344      344  \n",
       "Western Sahara            6        6  \n",
       "Yemen                     6        6  \n",
       "Zambia                   97      106  \n",
       "Zimbabwe                 32       40  \n",
       "\n",
       "[187 rows x 100 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_dataset_aggregate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ce3957b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(187, 100)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_dataset_aggregate.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "fee95e5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x15bdce62250>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corona_dataset_aggregate.loc[\"China\"].plot()\n",
    "corona_dataset_aggregate.loc[\"Italy\"].plot()\n",
    "corona_dataset_aggregate.loc[\"France\"].plot()\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5522ddf0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corona_dataset_aggregate.loc[\"China\"][:3].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "c38908a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corona_dataset_aggregate.loc[\"China\"].diff().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "6fd2ad36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15136.0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_dataset_aggregate.loc[\"China\"].diff().max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b7561928",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26849.0"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_dataset_aggregate.loc[\"France\"].diff().max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6d988bd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "countries = list(corona_dataset_aggregate.index)\n",
    "max_infection_rates = []\n",
    "for c in countries :\n",
    "    max_infection_rates.append(corona_dataset_aggregate.loc[c].diff().max())\n",
    "corona_dataset_aggregate[\"max_infection_rate\"] = max_infection_rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a3eb88dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>1/28/20</th>\n",
       "      <th>1/29/20</th>\n",
       "      <th>1/30/20</th>\n",
       "      <th>1/31/20</th>\n",
       "      <th>...</th>\n",
       "      <th>4/22/20</th>\n",
       "      <th>4/23/20</th>\n",
       "      <th>4/24/20</th>\n",
       "      <th>4/25/20</th>\n",
       "      <th>4/26/20</th>\n",
       "      <th>4/27/20</th>\n",
       "      <th>4/28/20</th>\n",
       "      <th>4/29/20</th>\n",
       "      <th>4/30/20</th>\n",
       "      <th>max_infection_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1176</td>\n",
       "      <td>1279</td>\n",
       "      <td>1351</td>\n",
       "      <td>1463</td>\n",
       "      <td>1531</td>\n",
       "      <td>1703</td>\n",
       "      <td>1828</td>\n",
       "      <td>1939</td>\n",
       "      <td>2171</td>\n",
       "      <td>232.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>634</td>\n",
       "      <td>663</td>\n",
       "      <td>678</td>\n",
       "      <td>712</td>\n",
       "      <td>726</td>\n",
       "      <td>736</td>\n",
       "      <td>750</td>\n",
       "      <td>766</td>\n",
       "      <td>773</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2910</td>\n",
       "      <td>3007</td>\n",
       "      <td>3127</td>\n",
       "      <td>3256</td>\n",
       "      <td>3382</td>\n",
       "      <td>3517</td>\n",
       "      <td>3649</td>\n",
       "      <td>3848</td>\n",
       "      <td>4006</td>\n",
       "      <td>199.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>723</td>\n",
       "      <td>723</td>\n",
       "      <td>731</td>\n",
       "      <td>738</td>\n",
       "      <td>738</td>\n",
       "      <td>743</td>\n",
       "      <td>743</td>\n",
       "      <td>743</td>\n",
       "      <td>745</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Bank and Gaza</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>474</td>\n",
       "      <td>480</td>\n",
       "      <td>484</td>\n",
       "      <td>342</td>\n",
       "      <td>342</td>\n",
       "      <td>342</td>\n",
       "      <td>343</td>\n",
       "      <td>344</td>\n",
       "      <td>344</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Western Sahara</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yemen</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zambia</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>74</td>\n",
       "      <td>76</td>\n",
       "      <td>84</td>\n",
       "      <td>84</td>\n",
       "      <td>88</td>\n",
       "      <td>88</td>\n",
       "      <td>95</td>\n",
       "      <td>97</td>\n",
       "      <td>106</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zimbabwe</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28</td>\n",
       "      <td>28</td>\n",
       "      <td>29</td>\n",
       "      <td>31</td>\n",
       "      <td>31</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>187 rows Ã— 101 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    1/22/20  1/23/20  1/24/20  1/25/20  1/26/20  1/27/20  \\\n",
       "Country/Region                                                             \n",
       "Afghanistan               0        0        0        0        0        0   \n",
       "Albania                   0        0        0        0        0        0   \n",
       "Algeria                   0        0        0        0        0        0   \n",
       "Andorra                   0        0        0        0        0        0   \n",
       "Angola                    0        0        0        0        0        0   \n",
       "...                     ...      ...      ...      ...      ...      ...   \n",
       "West Bank and Gaza        0        0        0        0        0        0   \n",
       "Western Sahara            0        0        0        0        0        0   \n",
       "Yemen                     0        0        0        0        0        0   \n",
       "Zambia                    0        0        0        0        0        0   \n",
       "Zimbabwe                  0        0        0        0        0        0   \n",
       "\n",
       "                    1/28/20  1/29/20  1/30/20  1/31/20  ...  4/22/20  4/23/20  \\\n",
       "Country/Region                                          ...                     \n",
       "Afghanistan               0        0        0        0  ...     1176     1279   \n",
       "Albania                   0        0        0        0  ...      634      663   \n",
       "Algeria                   0        0        0        0  ...     2910     3007   \n",
       "Andorra                   0        0        0        0  ...      723      723   \n",
       "Angola                    0        0        0        0  ...       25       25   \n",
       "...                     ...      ...      ...      ...  ...      ...      ...   \n",
       "West Bank and Gaza        0        0        0        0  ...      474      480   \n",
       "Western Sahara            0        0        0        0  ...        6        6   \n",
       "Yemen                     0        0        0        0  ...        1        1   \n",
       "Zambia                    0        0        0        0  ...       74       76   \n",
       "Zimbabwe                  0        0        0        0  ...       28       28   \n",
       "\n",
       "                    4/24/20  4/25/20  4/26/20  4/27/20  4/28/20  4/29/20  \\\n",
       "Country/Region                                                             \n",
       "Afghanistan            1351     1463     1531     1703     1828     1939   \n",
       "Albania                 678      712      726      736      750      766   \n",
       "Algeria                3127     3256     3382     3517     3649     3848   \n",
       "Andorra                 731      738      738      743      743      743   \n",
       "Angola                   25       25       26       27       27       27   \n",
       "...                     ...      ...      ...      ...      ...      ...   \n",
       "West Bank and Gaza      484      342      342      342      343      344   \n",
       "Western Sahara            6        6        6        6        6        6   \n",
       "Yemen                     1        1        1        1        1        6   \n",
       "Zambia                   84       84       88       88       95       97   \n",
       "Zimbabwe                 29       31       31       32       32       32   \n",
       "\n",
       "                    4/30/20  max_infection_rate  \n",
       "Country/Region                                   \n",
       "Afghanistan            2171               232.0  \n",
       "Albania                 773                34.0  \n",
       "Algeria                4006               199.0  \n",
       "Andorra                 745                43.0  \n",
       "Angola                   27                 5.0  \n",
       "...                     ...                 ...  \n",
       "West Bank and Gaza      344                66.0  \n",
       "Western Sahara            6                 4.0  \n",
       "Yemen                     6                 5.0  \n",
       "Zambia                  106                 9.0  \n",
       "Zimbabwe                 40                 8.0  \n",
       "\n",
       "[187 rows x 101 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_dataset_aggregate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "bba02e82",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data= pd.DataFrame(corona_dataset_aggregate[\"max_infection_rate\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "44e2cfff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_infection_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>232.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>199.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                max_infection_rate\n",
       "Country/Region                    \n",
       "Afghanistan                  232.0\n",
       "Albania                       34.0\n",
       "Algeria                      199.0\n",
       "Andorra                       43.0\n",
       "Angola                         5.0"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "b01d0f4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "happiness_report = pd.read_csv(\"C:/Users/hp/OneDrive/Desktop/worldwide_happiness_report.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3239d4ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall rank</th>\n",
       "      <th>Country or region</th>\n",
       "      <th>Score</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "      <th>Generosity</th>\n",
       "      <th>Perceptions of corruption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Finland</td>\n",
       "      <td>7.769</td>\n",
       "      <td>1.340</td>\n",
       "      <td>1.587</td>\n",
       "      <td>0.986</td>\n",
       "      <td>0.596</td>\n",
       "      <td>0.153</td>\n",
       "      <td>0.393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Denmark</td>\n",
       "      <td>7.600</td>\n",
       "      <td>1.383</td>\n",
       "      <td>1.573</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.592</td>\n",
       "      <td>0.252</td>\n",
       "      <td>0.410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Norway</td>\n",
       "      <td>7.554</td>\n",
       "      <td>1.488</td>\n",
       "      <td>1.582</td>\n",
       "      <td>1.028</td>\n",
       "      <td>0.603</td>\n",
       "      <td>0.271</td>\n",
       "      <td>0.341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>7.494</td>\n",
       "      <td>1.380</td>\n",
       "      <td>1.624</td>\n",
       "      <td>1.026</td>\n",
       "      <td>0.591</td>\n",
       "      <td>0.354</td>\n",
       "      <td>0.118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Netherlands</td>\n",
       "      <td>7.488</td>\n",
       "      <td>1.396</td>\n",
       "      <td>1.522</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.557</td>\n",
       "      <td>0.322</td>\n",
       "      <td>0.298</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Overall rank Country or region  Score  GDP per capita  Social support  \\\n",
       "0             1           Finland  7.769           1.340           1.587   \n",
       "1             2           Denmark  7.600           1.383           1.573   \n",
       "2             3            Norway  7.554           1.488           1.582   \n",
       "3             4           Iceland  7.494           1.380           1.624   \n",
       "4             5       Netherlands  7.488           1.396           1.522   \n",
       "\n",
       "   Healthy life expectancy  Freedom to make life choices  Generosity  \\\n",
       "0                    0.986                         0.596       0.153   \n",
       "1                    0.996                         0.592       0.252   \n",
       "2                    1.028                         0.603       0.271   \n",
       "3                    1.026                         0.591       0.354   \n",
       "4                    0.999                         0.557       0.322   \n",
       "\n",
       "   Perceptions of corruption  \n",
       "0                      0.393  \n",
       "1                      0.410  \n",
       "2                      0.341  \n",
       "3                      0.118  \n",
       "4                      0.298  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "happiness_report.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "73c24359",
   "metadata": {},
   "outputs": [],
   "source": [
    "useless_cols =[\"Overall rank\", \"Score\", \"Generosity\", \"Perceptions of corruption\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "6030bee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country or region</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Finland</td>\n",
       "      <td>1.340</td>\n",
       "      <td>1.587</td>\n",
       "      <td>0.986</td>\n",
       "      <td>0.596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>1.383</td>\n",
       "      <td>1.573</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Norway</td>\n",
       "      <td>1.488</td>\n",
       "      <td>1.582</td>\n",
       "      <td>1.028</td>\n",
       "      <td>0.603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Iceland</td>\n",
       "      <td>1.380</td>\n",
       "      <td>1.624</td>\n",
       "      <td>1.026</td>\n",
       "      <td>0.591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>1.396</td>\n",
       "      <td>1.522</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>Rwanda</td>\n",
       "      <td>0.359</td>\n",
       "      <td>0.711</td>\n",
       "      <td>0.614</td>\n",
       "      <td>0.555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>Tanzania</td>\n",
       "      <td>0.476</td>\n",
       "      <td>0.885</td>\n",
       "      <td>0.499</td>\n",
       "      <td>0.417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0.350</td>\n",
       "      <td>0.517</td>\n",
       "      <td>0.361</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>Central African Republic</td>\n",
       "      <td>0.026</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.105</td>\n",
       "      <td>0.225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>South Sudan</td>\n",
       "      <td>0.306</td>\n",
       "      <td>0.575</td>\n",
       "      <td>0.295</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>156 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Country or region  GDP per capita  Social support  \\\n",
       "0                     Finland           1.340           1.587   \n",
       "1                     Denmark           1.383           1.573   \n",
       "2                      Norway           1.488           1.582   \n",
       "3                     Iceland           1.380           1.624   \n",
       "4                 Netherlands           1.396           1.522   \n",
       "..                        ...             ...             ...   \n",
       "151                    Rwanda           0.359           0.711   \n",
       "152                  Tanzania           0.476           0.885   \n",
       "153               Afghanistan           0.350           0.517   \n",
       "154  Central African Republic           0.026           0.000   \n",
       "155               South Sudan           0.306           0.575   \n",
       "\n",
       "     Healthy life expectancy  Freedom to make life choices  \n",
       "0                      0.986                         0.596  \n",
       "1                      0.996                         0.592  \n",
       "2                      1.028                         0.603  \n",
       "3                      1.026                         0.591  \n",
       "4                      0.999                         0.557  \n",
       "..                       ...                           ...  \n",
       "151                    0.614                         0.555  \n",
       "152                    0.499                         0.417  \n",
       "153                    0.361                         0.000  \n",
       "154                    0.105                         0.225  \n",
       "155                    0.295                         0.010  \n",
       "\n",
       "[156 rows x 5 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "happiness_report.drop(useless_cols, axis=1, inplace=True)\n",
    "happiness_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "1bf59b76",
   "metadata": {},
   "outputs": [],
   "source": [
    "happiness_report.set_index(\"Country or region\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "bafa9ddf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country or region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Finland</th>\n",
       "      <td>1.340</td>\n",
       "      <td>1.587</td>\n",
       "      <td>0.986</td>\n",
       "      <td>0.596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Denmark</th>\n",
       "      <td>1.383</td>\n",
       "      <td>1.573</td>\n",
       "      <td>0.996</td>\n",
       "      <td>0.592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Norway</th>\n",
       "      <td>1.488</td>\n",
       "      <td>1.582</td>\n",
       "      <td>1.028</td>\n",
       "      <td>0.603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iceland</th>\n",
       "      <td>1.380</td>\n",
       "      <td>1.624</td>\n",
       "      <td>1.026</td>\n",
       "      <td>0.591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Netherlands</th>\n",
       "      <td>1.396</td>\n",
       "      <td>1.522</td>\n",
       "      <td>0.999</td>\n",
       "      <td>0.557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rwanda</th>\n",
       "      <td>0.359</td>\n",
       "      <td>0.711</td>\n",
       "      <td>0.614</td>\n",
       "      <td>0.555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tanzania</th>\n",
       "      <td>0.476</td>\n",
       "      <td>0.885</td>\n",
       "      <td>0.499</td>\n",
       "      <td>0.417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>0.350</td>\n",
       "      <td>0.517</td>\n",
       "      <td>0.361</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Central African Republic</th>\n",
       "      <td>0.026</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.105</td>\n",
       "      <td>0.225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Sudan</th>\n",
       "      <td>0.306</td>\n",
       "      <td>0.575</td>\n",
       "      <td>0.295</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>156 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          GDP per capita  Social support  \\\n",
       "Country or region                                          \n",
       "Finland                            1.340           1.587   \n",
       "Denmark                            1.383           1.573   \n",
       "Norway                             1.488           1.582   \n",
       "Iceland                            1.380           1.624   \n",
       "Netherlands                        1.396           1.522   \n",
       "...                                  ...             ...   \n",
       "Rwanda                             0.359           0.711   \n",
       "Tanzania                           0.476           0.885   \n",
       "Afghanistan                        0.350           0.517   \n",
       "Central African Republic           0.026           0.000   \n",
       "South Sudan                        0.306           0.575   \n",
       "\n",
       "                          Healthy life expectancy  \\\n",
       "Country or region                                   \n",
       "Finland                                     0.986   \n",
       "Denmark                                     0.996   \n",
       "Norway                                      1.028   \n",
       "Iceland                                     1.026   \n",
       "Netherlands                                 0.999   \n",
       "...                                           ...   \n",
       "Rwanda                                      0.614   \n",
       "Tanzania                                    0.499   \n",
       "Afghanistan                                 0.361   \n",
       "Central African Republic                    0.105   \n",
       "South Sudan                                 0.295   \n",
       "\n",
       "                          Freedom to make life choices  \n",
       "Country or region                                       \n",
       "Finland                                          0.596  \n",
       "Denmark                                          0.592  \n",
       "Norway                                           0.603  \n",
       "Iceland                                          0.591  \n",
       "Netherlands                                      0.557  \n",
       "...                                                ...  \n",
       "Rwanda                                           0.555  \n",
       "Tanzania                                         0.417  \n",
       "Afghanistan                                      0.000  \n",
       "Central African Republic                         0.225  \n",
       "South Sudan                                      0.010  \n",
       "\n",
       "[156 rows x 4 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "happiness_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "edc50bc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = final_data.join(happiness_report, how=\"inner\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "b06e1950",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_infection_rate</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>232.0</td>\n",
       "      <td>0.350</td>\n",
       "      <td>0.517</td>\n",
       "      <td>0.361</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>34.0</td>\n",
       "      <td>0.947</td>\n",
       "      <td>0.848</td>\n",
       "      <td>0.874</td>\n",
       "      <td>0.383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>199.0</td>\n",
       "      <td>1.002</td>\n",
       "      <td>1.160</td>\n",
       "      <td>0.785</td>\n",
       "      <td>0.086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>291.0</td>\n",
       "      <td>1.092</td>\n",
       "      <td>1.432</td>\n",
       "      <td>0.881</td>\n",
       "      <td>0.471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>134.0</td>\n",
       "      <td>0.850</td>\n",
       "      <td>1.055</td>\n",
       "      <td>0.815</td>\n",
       "      <td>0.283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Venezuela</th>\n",
       "      <td>29.0</td>\n",
       "      <td>0.960</td>\n",
       "      <td>1.427</td>\n",
       "      <td>0.805</td>\n",
       "      <td>0.154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vietnam</th>\n",
       "      <td>19.0</td>\n",
       "      <td>0.741</td>\n",
       "      <td>1.346</td>\n",
       "      <td>0.851</td>\n",
       "      <td>0.543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yemen</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0.287</td>\n",
       "      <td>1.163</td>\n",
       "      <td>0.463</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zambia</th>\n",
       "      <td>9.0</td>\n",
       "      <td>0.578</td>\n",
       "      <td>1.058</td>\n",
       "      <td>0.426</td>\n",
       "      <td>0.431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zimbabwe</th>\n",
       "      <td>8.0</td>\n",
       "      <td>0.366</td>\n",
       "      <td>1.114</td>\n",
       "      <td>0.433</td>\n",
       "      <td>0.361</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>143 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             max_infection_rate  GDP per capita  Social support  \\\n",
       "Afghanistan               232.0           0.350           0.517   \n",
       "Albania                    34.0           0.947           0.848   \n",
       "Algeria                   199.0           1.002           1.160   \n",
       "Argentina                 291.0           1.092           1.432   \n",
       "Armenia                   134.0           0.850           1.055   \n",
       "...                         ...             ...             ...   \n",
       "Venezuela                  29.0           0.960           1.427   \n",
       "Vietnam                    19.0           0.741           1.346   \n",
       "Yemen                       5.0           0.287           1.163   \n",
       "Zambia                      9.0           0.578           1.058   \n",
       "Zimbabwe                    8.0           0.366           1.114   \n",
       "\n",
       "             Healthy life expectancy  Freedom to make life choices  \n",
       "Afghanistan                    0.361                         0.000  \n",
       "Albania                        0.874                         0.383  \n",
       "Algeria                        0.785                         0.086  \n",
       "Argentina                      0.881                         0.471  \n",
       "Armenia                        0.815                         0.283  \n",
       "...                              ...                           ...  \n",
       "Venezuela                      0.805                         0.154  \n",
       "Vietnam                        0.851                         0.543  \n",
       "Yemen                          0.463                         0.143  \n",
       "Zambia                         0.426                         0.431  \n",
       "Zimbabwe                       0.433                         0.361  \n",
       "\n",
       "[143 rows x 5 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "df3e8f54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_infection_rate</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>max_infection_rate</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.250118</td>\n",
       "      <td>0.191958</td>\n",
       "      <td>0.289263</td>\n",
       "      <td>0.078196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GDP per capita</th>\n",
       "      <td>0.250118</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.759468</td>\n",
       "      <td>0.863062</td>\n",
       "      <td>0.394603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Social support</th>\n",
       "      <td>0.191958</td>\n",
       "      <td>0.759468</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.765286</td>\n",
       "      <td>0.456246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <td>0.289263</td>\n",
       "      <td>0.863062</td>\n",
       "      <td>0.765286</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.427892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Freedom to make life choices</th>\n",
       "      <td>0.078196</td>\n",
       "      <td>0.394603</td>\n",
       "      <td>0.456246</td>\n",
       "      <td>0.427892</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              max_infection_rate  GDP per capita  \\\n",
       "max_infection_rate                      1.000000        0.250118   \n",
       "GDP per capita                          0.250118        1.000000   \n",
       "Social support                          0.191958        0.759468   \n",
       "Healthy life expectancy                 0.289263        0.863062   \n",
       "Freedom to make life choices            0.078196        0.394603   \n",
       "\n",
       "                              Social support  Healthy life expectancy  \\\n",
       "max_infection_rate                  0.191958                 0.289263   \n",
       "GDP per capita                      0.759468                 0.863062   \n",
       "Social support                      1.000000                 0.765286   \n",
       "Healthy life expectancy             0.765286                 1.000000   \n",
       "Freedom to make life choices        0.456246                 0.427892   \n",
       "\n",
       "                              Freedom to make life choices  \n",
       "max_infection_rate                                0.078196  \n",
       "GDP per capita                                    0.394603  \n",
       "Social support                                    0.456246  \n",
       "Healthy life expectancy                           0.427892  \n",
       "Freedom to make life choices                      1.000000  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "f7b85c20",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\hp\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='GDP per capita', ylabel='max_infection_rate'>"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x= data[\"GDP per capita\"]\n",
    "y = data[\"max_infection_rate\"]\n",
    "sns.scatterplot(x,np.log(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "3312e2a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\hp\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='GDP per capita', ylabel='max_infection_rate'>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX8AAAEGCAYAAACNaZVuAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAABDvUlEQVR4nO29eZxc51Xn/T219763JGvvtmzZjpfYkmzJjlGchIQkJCQEErMMb2CwgRB74CWYLSSvGSYxM0MwxAGLECALdsABYgayEUevkkiyNse7HFutfe9FvdVe9cwft6pUVV3VfW/X3nW+n48+raq6de+pqnvPfZ7z/M45YoxBURRFaS5ctTZAURRFqT7q/BVFUZoQdf6KoihNiDp/RVGUJkSdv6IoShPiqbUBdunv7zfr1q2rtRmKoigNxcGDB0eNMQP5zzeM81+3bh0HDhyotRmKoigNhYgcL/S8hn0URVGaEHX+iqIoTYg6f0VRlCZEnb+iKEoTos5fURSlCWkYtY+iKEo2Ow9f4NFdI5ycCLK6p5V77xxi+8bBWpvVMOjIX1GUhmPn4Qv84ZMvcmE6THeLlwvTYf7wyRfZefhCrU1rGNT5K4rScDy6awSvW2j1eRCx/nrdwqO7RmptWsOgzl9RlIbj5ESQFq8757kWr5tTE8EaWdR4VNT5i8jnROSCiLyQ9VyviHxLRF5N/e2ppA2Koiw9Vve0Eoolcp4LxRKs6mmtkUWNR6VH/n8HvC3vud8Bvm2M2QB8O/VYURTFNvfeOUQsYQhG4xhj/Y0lDPfeOVRr0xqGijp/Y8wuYDzv6XcDf5/6/98DP1FJGxRFWXps3zjIg++6jsGOAJOhGIMdAR5813Wq9nFALaSey4wxZwGMMWdFpOivJSL3APcArFmzpkrmKYrSCGzfOKjOvgTqesHXGLPDGLPJGLNpYGBORVJFURRlkdTC+Z8XkRUAqb8qzFUURakytXD+TwK/kPr/LwBfrYENiqIoTU1FY/4i8hiwHegXkVPAx4BPAv8oIr8EnAB+qpI2KEozoSUPFLtU1PkbY+4u8tKbKnlcRWlG0iUPvG7JKXnwIOgNQJlDXS/4KopiHy15oDhBnb+iLBG05IHiBHX+irJE0JIHihPU+SvKEkFLHihO0GYuilJlKqXI2b5xkAexYv+nJoKsUrWPMg/q/BWlilRakaMlDxS7aNhHUaqIKnKUekFH/opSRU5OBOlu8eY8p4qc4mjSWuXQkb+iVBFV5NhH+/RWFnX+ilJFVJFjH7shsp2HL3D3jr3c8dBT3L1jr94cbKLOX1GqiDYhsY+dpDWdHSwejfkrSpVRRY49Vve0cmE6TKvvspvKD5Flzw4AWn0egtE4j+4a0e94AXTkrygNylIPd9gJkWlJi8WjI39FaUDqsYJnuZU5dpLW7MwOVDFUGDHG1NoGW2zatMkcOHCg1mYoSl1w9469c5xeMBpnsCPAY/fcVnV7sm9GLV43oViCWMJUfD1joePWyq56QkQOGmM25T+vYR9FaUDqLdxRyeS1+cJbCy2ga1JdcTTsoygNiJ1wRzWpVPKanfDWfAvomlRXHB35K0oDUm/5ApVKXit15K5JdcVR568oDUi95QtU6mZUanir3m6S9YSGfRSlQamnfIHtGwd536lLfPZ7R5mNJmjzufmvd6wv2b5Sw1ta5ro46vwVRSmZnYcv8MSh0wx0+FmTUtU8ceg0N6zqLsnR3nvnEH/45IsEo/EctY6TkXs93STrCQ37KIpSMpVS1dRbeGspoSN/RVFKppKqGh25VwYd+SuKUjKqqmk81PkrilIyqqppPNT5K4pSMhqbbzw05q8odUqjFSTT2HxjoSN/RalDtEmJUmnU+StKHaIFyZRKo2EfRalDalGQrNHCTEpp1GzkLyK/ISIvisgLIvKYiARqZYui1BvVlk5qmKn5qInzF5GVwH3AJmPM6wA38IFa2KIo9Ui1pZNLMcy01NtclkotY/4eoEVEPEArcKaGtihKXVFt6WS9NYcpFZ3JLExNYv7GmNMi8r+AE0AI+KYx5pv524nIPcA9AGvWrKmukYpSY6opnay35jClkj2TAWj1eQhG4zy6a6Sp1jHma9Nbq7BPD/BuYD1wBdAmIj+Xv50xZocxZpMxZtPAwEC1zVSUuqacYY2llKG78/AFDp2Y4PjYLCMXZ5gOx4DGnsk4IZk0TIdjnJ0McXE6UnS7WoV93gwcNcZcNMbEgH8GttXIFkVpOMod1lgqGbrp70UEXCLEk4Yzl8JMh2MNPZNZCGMMs5E4F6bCHB8PcnE6QiiamPc9tZJ6ngBuE5FWrLDPm4ADNbJFURqOSoQ1lkKGbvp7WdYR4MxkCDEAhnOTYQY7Aw05k5mPcCzBdDhOMBonkSwe4ilErWL+T4vIE8AhIA48A+yohS2K0ohoY/LCpL8X8QkAozMRogmDgYacyRQiEk8wG0kwG4kTSyQXvZ+aJXkZYz4GfKxWx1eURmapLdCWi+zvpbPFS2eLl2A0zmBHoKEdfzyRZDaSYDoSIxpfvMPPRss7KE1Jo2vAl9ICbTlZSt9LMmmYSi3cnhgPMjYbKZvjB3X+ShOyFDTgS2WBttw0+veSXrg9n1q4HbWxcLtYtLaP0nQsFQ34UligrQSN+L2EoglmInFmI3GS82jzy4k6f6Xp0MVSpR6IxBPMhOPMRhLEk+UL59hFnb/SdDTzYmktK3cu5aqhdj9bLJFkNhJnOlyaUscOSWN46exU0dfV+StNx713DvGHT75IMBqnxesmFEs07KKgE9JrHdG4pQ0/Nxnm0IkJPrR9mPvefFVVju11S846y4PQ8DeAhT5bWqkzE40TyavUum9knMf3n+TsVIgVnS18YPNqtgz1LtqWaDzJoRMT7Dkyxu6RMcZmokW3te38ReQq4C+BZcaY14nIDcC7jDH/fdGWKkoN2L5xkAexYv+nJoKsWmKj0GI8umuEaDzB2GwUF4LHJSSM4ZGdR7hhVXdFP389rbOkR+k/PD9FLGHweVxsGOxY9DlQ6LPNRmI88p3XuGp5B+FY4QXbfSPjPPzUq3hcQmfAw9hshIefepX72eDoBjARjLJ3ZJzdR0Y5eGyCsE1FkJOR/18DHwEeBTDGPCci/wCo81eqTqkhhEZcFCyVkxNBpsNxXAgul5UE5RYrFFFpJ1zLdZbsc6Xd52ZsNorbJUyF44C12HpsbKboTGShcy392YwxJI0VbnG7hJMTwaKOH+Dx/SfxuCRTTTU9C318/8l5nb8xhuPjQXa/NsbuI2O8fHaK7CVil8B1V3SxbbiPN18zyJaHCu/HifNvNcbsE5Hs5+IO3q8oZWEphxAqyeqeVs5NhvG4Ll/DxoDf7aq4E67VOkv+ufLaxRniCYPHJZmbYNIYpkJxlnd55twE7ZxrV3S1cH4qhN/rJu2Fw7Ekyztb5rXt7FSIzkCuCw54XZybCs3ZNp5I8vzpSXYfGWPPyBhnLoVzXm/xutm8rodtw33cur6PrlbrRtvuL+7inTj/UREZJvXxROR9wFkH71eUslBPIYRG4t47hzh0YoKEMbjFcvzGQFebt+JOuFLrLAuNyvPPlUTS4BKIxJP4PVaakwhEE8mCM5Fi59pf7jzC9au6mI0keO/rV/LwU6+SNAkCXhfhWJJ40vCBzavntX1FZwtjs5GcPgrZN42ZSJz9R8fZfWSMp4+OMxPJHWsPtPvZNtzHtiv7uHFVNz6Ps7QtJ87/Q1j1dzaKyGngKPCzjo6mKGVApZqLY/vGQT60fZhHdh4hlkjid7voavPidbsdO2GnYTen6yx29m9nVJ5/rvjcrozKxhjL8RtjPV9oJpL9/qQxJJMGtwjHx2eZDFmlorcM9XI/G3h8/0nOTYVYbnPh9gObV/PwU68Sil2+aYTjCVb3tvCRf3qWH5yanFOs7apl7Wwd6mPrcB8bBtvJi8Q4wonzN8aYN4tIG+AyxkyLyPpFH1lRFkkzSzVL5b43X8UNq7pLWuxebNjN7jqL3f3bmQHmnyv97X5OXwrhcUESy5ljoLPNW3AmsrK7hfNTYfwed6YxSiiWmBPS2TLU61ils2Wolw+bK/nb3cc4cylEwhjCsST/9tzlgIrXLdy8poetw31sHepjoMPv6Bjz4cT5fwW42Rgzm/XcE8AtZbNGUWzQrFLNclHqYnelw252929nBph/rnjcQnerl4F2Pxenw0RTap91fe2Zm2Baiz8TifOem6yQTiJpHIV05iMcS3DoxAS7j4yxd2Sc8dlcOWZ3i5dbh3rZNtzPprU9tPjcRfZUGgs6fxHZCFwHdInIe7Ne6gQCFbFKUeahWaWa9UKlw252929nBljoXPnoO66dc66ktfinL4VytPiLDenkMz4bZU9qsfbg8QkieXLMtb2tbB3uY9twH9es6MTtWnw4J82+kXH+6eApvAPrri/0up2R/9XAO4Fu4Meznp8GfrlkCxVlETSjVLNeqHTYze7+7c4Ai50rxhhmo1aJhWC0uHBxMSEdYwxHR2fZM5KWY07nvO4SuH6lJcfcOtxX9pBlOofA5xYwyYIfbkHnb4z5KvBVEdlqjNlTVgsVRWk4Kh12c+LUFzMDrFQRtVgiyfOnLDnm7iNjnJvKlWO2+dxsXtfLtiv72LKul8682U05yeQQ+Moj9XxGRD6EFQLKhHuMMb+4eBMVRWk0Kh12c7J/uzPAcCxBMJrgP186xz88Xb5yCtPhGPtScsx9x8aZjeQmdS3r9LNtuJ+tQ73cuLobr7s6VfTTOQTzBY+cOP8vAIeBtwIPYsk8Xy7BPkVRGpRKh93Ksf/8doflKqdw+lLISrY6MsZzpy6R3zp34/KOTDhnqL+tJDmmE0QEn8dFwONibW8bozNhAt7iNxsnzv9KY8xPici7jTF/nyrt8I2SLVYURSkT81XNXGw5hUTScPjcVCacc3wsd+HZ53Fx85puy+EP9dHXXj455nyICH6Pi4DXTYvXjd/jypTt+LXtw5nQWTGcOP9Y6u8lEXkdcA5Yt0i7FUVRysJ8VTOzcVJOIRRLcPDYRCq7doyJYCzn9Z5WbybZ6pa1PQS8lZFj5uNPOfoWr5uA11V0VpEdOkNcBf28E+e/Q0R6gD8AngTagY86tF1RFKVkEknDbNRatLXb5nChcgqjMxH2ptQ5B49PEEvkxnPW97exdaiXrSk5pqsK4RyPy0WLz23987odSUDToTO599jzBfdtZyci4gKmjDETwC5As2kUWyzlBh5KdUlmHH6CUCyRybi1S345hVA0QTieZKDDx69+8RCvnM+VY7pdwo2rujLZtVd0z1+orRy4RKwwTsrZO63X4wSx+wWKyC5jzJ0Vs2QBNm3aZA4cOFCrwyuLIDtNP1uy10gNtZXaktbiz0biBKPOHX4+u18d5XO7j3FuMkQsaeaM7tv9Hras72XrUB+3ru+lPeAkOOIcj8tFwOvC73Hj97rwe4qHchaLiBw0xmyac2wH+/iWiPwW8GUgU+LBGDNeBvuUJchSq76ps5jqYIwhmOXwS9XiT4YuyzH3HxsnmBcmWtEVyKhzbljZhaeCcky/103A48r8reSxFsKJ80/r+T+U9ZxBQ0BKEZZC9c3srk8zkQS9bV762vzaQ8Amdm+YxhhCMSv5Khgp3eGfmghm5JjPn57MkWMKcM2KjlQ5hX7W9bWWZbRdqCXjG64eyCzQZqtx6gHbzt8YM28FTxF5izHmW6WbpCwVGr36ZnbYKhxLkjSGsZkYfo+bjoC3oWcx5WAhx75Qdc5yOvxE0vDSmSl2Hxll95ExTk7kKnj8Hheb1lrVMW8b6qO3zbfoYxUinUPgdQs9LV4mw1Ee2fkay7sCdXt+lDOg9RCgzl/J0OjVN7PDVtFEErcIBrg4HaEj4G24WUw5sVN2uVhv28/sPMK1KztLdvihaIL9x8etgmlHxjJtGdP0tfm4baiP/jYfz5y8xGsXZ5iNJOhv85eU1ZuNx+Ui4HPxlWdO0eJ10ea3Zrpej7vuBwfldP71M59R6oJGr76ZHbbyuV3EEwZxWV2foLFmMeXGznpOfiOURNLgdrk4MT7LTHhxHWAvTkcyrQyfOTFXjjk00MbWoT5uv7KPq5Z1cODoRFmyetNk1DgpRU5ajXN2MtxwIc5yOv/yVUhSlgyNXH0zO2zV3+7nzGQIkuB1CcFovGyzmEZcSLaznnNFVwsXpnMboYQLNEKZD2MMr16YyWTXvnZhJud1T0qOue3KfrYO97G8M7fK/GKzetOks2jTzr6YGqcRQ5yV1THNg4h0A58FXod14/hFrRqq1BPZYauOgIe+uI+JYIxWv4fBjkBZnHSjNqMv5uyu6GphbCaS09vWaSOUaDzJMycnMgu2ozO5zU46Ah5uXW81O9m8roe2eZqUO8nqTeN1u2hNJVYFPG5bi7SNGOIsp/M/5nD7h4GvG2PeJyI+oH5vkUpFqdeRb37Yan1/O58ss22NKofNdnZ+j4tgNEE0nuQ9d6xcVG/byWCMvUfHMnLMcCy3Ls8V3ZYc8/bhfl63sst2pmt2Vu9MJM5EMEo0niTgdbNvZJwtQ72ZuH1aleNEfpl97rb73IgIk6FYQ4Q4bSd5AYjINqx6PpmbhjHm844PKtIJPAsMGZsGaJLX0qTZE8HueOgpulu8OaEEYwyToRjffeAu2/up9g00Gk/yzRfO8TffP8rZSecdrowxnBwPsfvIKHtGxnjxzNQcOea1V3SyLdXdak3v4uSYaRVOLJ7gUuqmhIHedh8+t5uP//i1vPm65Y73C41z7pac5CUiXwCGgR8A6SwJAzh2/li5AReBvxWRG4GDwP15/YGVJqBRR77lYr5YcSGHDhR8rhqho2g8yTdfPMfnvneU05PO6+EnkoYXTk9mFmxP5ckxA14Xm9b2sm24j1uHeulpLV2OuWWol/tlA//9318iaSDgcTHQ4aezxUcwGudvvn9s0c6/0c9dJ2GfTcC1dkfqNo57M/BhY8zTIvIw8DvkFYoTkXuAewDWrFlThsMq9cZSSAQrhWKx4q1DvXMc+keeeBYDdLV4c5x8m89dMScUiScIRhLMRuN874ejjpUzs5E4+49NsPvIKE8fHWc6T+XT3+7L9K59/eqestWy8WUt0v70ptV8+juvsa4vd4ZV6nnW6OeuE+f/ArAcOFuG454CThljnk49fgLL+edgjNkB7AAr7FOG4yp1RiOqJMpJMTlsoVHl6YkQCKzoask8F4zGGRmdZcNge85+S3FCoajl7EPRRE5NfLvKmfNTYfak1Dk/OHmJeF63kysH29k21Me2K/vYMNheluzatLMPpP7lrwlU4jxr9HPXifPvB14SkX1AJP2kMeZdTg9qjDknIidF5GpjzCvAm4CXnO5HaXwaUSVRbgrJYf/gqy/MGVXGk8k5jjLtiEOxRElOKBy73Nc2kd+aKkUx5czZySCHz01lHP6Ri7nRW69buGn15WYng3lyzMWwkLOHuYuxU6mYf7nOs+xzN55Icn4qQiyZxOsSdh6+UPehHyfO/+NlPvaHgS+llD4jwAfLvH+lAWj0RLD5KGURttCo0uNyzUmlDMUSrO9rJRhLOr6Bptscfvul83zp6RML9rXNVs4kU8XXJkMxIvEkv/alZ3K27Qx4uG3ICudsWteT8zkWQ1qR0+rz2Kprny+hDcUSGKxkvXKpcdLn7kNfP8yxsSBet7Cqu4VY0jSEXNep2mcZsDn1cJ8x5kJFrCqAqn2UalOK855PCQJzF23z91vo/VOhWCbmX2yfC91A043MC/W1zdbi33/X3Dj+t186z6d3vkY0niQcS87J6lzd05JS5/Rz7RWdjhqP5ONOhZcCqbr2Thuf371j75ybZzAaZ7AjwGP33LZou2p9rMVQDrXPTwP/E9iJNf74CxH5iDHmibJZqSh1QqnJV8WUIA99/TCz0cSC+y00I/roO67N7LuQky9mVzhmOfvZSIJ40n5f283rezg+HmT3a1Y45+WzU3Mc/rq+Vq5d0cnIxVkmQlFeOTfD61f3OHb8InK5PaHPqm/vhPwb9Q/PT2XWRtJUajG2URd+nczFfh/YnB7ti8gA8J9Yi7WKsqQoVcZXzCG8emGGVT0ttvZbrDSGneOnQzrpEX4x8uP4xhiSxvDDC9P8/Of2ceZSeM5n2LLeamV46/peXjk7vejaOekWhW1+y+kvduG30I16JpJgdCbCQMfl9YVKLcY26sKvE+fvygvzjAG160TQxNRrRuxSotTRXDGHkN7PYvc7H/khHTus6Gzh4nSYhDHWzSIazyRbpZueDHb4M3LMG1d158gxndTO2Xd0nH88cJJzk2FW97byqz8yXJbzttCNurfNy/hsjDa/p+JCgkqKFip5rTtx/l8XkW8Aj6Uevx/4j7JYodimUWvBVIpKXRyljuaKOYT1fa0lK3OyScsygwVCOvNxdjLE7iNjTEdinJ4Mz3l9ZXcLP3rtMrYO9zE80FZ0VL5Q7Rx/KpSz/+gYj3znNXweF71tPkZnImU7bwvdqPva/MQShsGOQMWFBJUSLVT6WnfSzOUjIvKTwO1YMf8dxph/KdkCxRGNnlVYTrIvDrfAMycn+KXPH+CqwXYeeNvGkr6PUkdzxRwCUNJ+k0lDOBXSCUaLyzLnvM8YXjk3namOeXQ0V44pWPLJgXY/P3/bWt5y3TJb+81WAIEVu4/Ek6zpbePYxVn++ntHOTkRZCoUo83vpttnZe2W87wtdqPeMNhRtQXXSlSvrfS17kh/ZYz5CvCVko+qLJpGWFyqVlgqfXHEE4Yzk2FcWDeBo6OzJY+QyjGaK+YQnO43Ek8QiiYIxRKWyial0CvUNjA71BKOJTh4fII9I1Z1zIlgLGe/3S1ebhuyetduWttDi8/ZIivA3VtW8/BTrxJNJGn1uYnEkxgDd1zZx8f/z0uZUeu5yTChaCLTBQ3Kd94u1VyRSl/rCzp/EfmeMeYOEZkmt2a/AMYY01kWSxRb1PviUjXDUumL4+jkLC4El8vqtJVIGrxuKXmEVKleBAvtN9PAPJVlW2h0ny3RzF5o/cXwOsLxJLuPjHHwxATReG4oKOBxcev6Pt63aSUbly9Ojun3umlNl07YvJplnYEFM5T9HhfRRDLTBQ3Kd94u1VyRSl/rCzp/Y8wdqb8dZTmiUhLVGuUsdvRezbBU+uJIt1gEMMZK5Km32ZAdQtHLWbYLtTdML7QGPC6i8STBaILpcIw//trhnO1cYqlqWn1uulo8JA388MI0s+GEbcfvdbsIeN1WjXvv3Pr2djKU081wwvFEpndvOc/bRm4aVIxKX+u21Tqpqp4LPqdUlu0bB3nwXdcx2BFgMhRjsCNQ9hKy6dH7helwzuh95+GFc/pOTgQrpmbJ5947h4glDG6XkExJFI2BgQ5/Xc2GimGMIRRNcHE6wvGxWc5OhpgOxxZ0/LFEkmPjs0yHYxwdC3J8PMTYbJRoqqVhm8/NG68e4PffvpFrV3SyrNPPYIcfvydVr94lPL7/ZNH9i1g37752P6t7W1nd28pAh582v8dWYxOwbsxpdRNAZ4uXvjYfbT5Pxc7bpUalr3UnMf/rsh+IiAe4pSxWKI4oNsopV6y9lNF7NcNS6en+J7/2Mq9enMErwvIuP26XFB0h1Vomm0xao975QjqFmArF2HfMala+7+g4s9FEzuvpDN1lHQE+83M3ZzJiP/u9o7Y6WZVLc5+m0KjV53HzyffeoA7fAZWc0diJ+f8u8HtAi4hMpZ8GoqQqbiq1p5yx9lIWmqq9+Ja+ONJO/dREsGiLxVrJZBNJQzAaJxi1dPh2S6qcngixe2SMPUdGee7UJPn3Ca9baPW66Wr1kkwaEgZ++Q1DOaUQ8tU4AOFYkuWdLfi9btp86d60zhd788m/sb7v5pXsGRlfUnH4pYSdmP8ngE+IyCeMMb9bBZuURVDOWHspo/daLb7ZGSFVcz0inkgyG7XkmNkKnflIJA0vn53K9K49Pp57s/V5XNyypoetw31sHerlyIXZBVskfmCzpcYJxRK0eN1EElZNnvvuupKV3fYbqS9EoRvrE4dOa2injnES9tknIl3GmEnINGDfboz510oYpjijnLKwcmjc6/GCr7R0Li3JnI0miMQSC78Ba5H3wPEJ9hwZY+/I2OVWgyl6Wr0pZ9/HLWt7CGSN4Pva/QuWUHjD1QO0Bzx8Ye9xzlwKVexmrPknjYcT5/+x7KQuY8wlEfkY8K9lt0pxTDlj7Sqds4cxhnAsybdeOsfffv8YZ2y2NhydiWRq3x86MUEskTsrGOpvy5RTuHp5By4H8Xe3S2jxuXNKH6/sbuGdN15R9D3lWAdxemOt9dqL4rC2T4nvVypIuWPt9Tp6L4VyfEdpmeJMxFqw3fPa2IKFzYwxHLk4azUrPzLOK+enc/bpdgk3ruqymp0M982pRrkQ2br7gNd5NcxyrIM4ubFqiZL6wInzPiAifwo8gpXs9WGsxutKHbBUR+vlZLHfUTyRJBhLZdlGEzlSzGKFzf5h3wnERSZ+f2E6krPPdr+HLet7uX24j83re2n3278UC43uF0u5wjVObqwaIqoPnDj/D2M1WP9y6vE3gT8ou0XKolmKo/VyY/c7SlfIDEbjc7Jks8kubJZIGmYjcWaicU5NhHjgK8/nbLuiK8DW4T5uH+7j+pVdeBw0KClldD8f5VoHcXJjzT7mVCjG6EyEaCLJqYlQQ7Q/XCo4Kew2C/yOiLQbY2YqaJOiVJ1YIkmoyOh+PnpafJydChGNJwnFcm8SAlyzojMTzlnX12pbPy9i6fZbfR7afG48bldF4uTlXiuyY0/6mFZNphAuBMH6vjT8Uz2cdPLaBnwWaAfWiMiNwL3GmF+rlHGKUikSqWSrUDRBOJbg+6+OzlskLft9L56ZzCzYnpzITZZKV8d85/UruPvWNfS2+WzblG5d2Or30JpXRmExcXI7N4taFEVLH/PCdNhqSSyAEZZ3BXC7Sq/JpNjDSdjnU8BbgScBjDHPisidFbFKUcqMMYZIqgZOKJYrxSxWJC29aBuMxjlwbILdKTnmVDies++OgAef20UiaZUy/pktaxaUYKaxG85xGie3e7NYzDpIqTOQ9DHv/eJBksbgd7sY6PDTEfBijKlIKRBVF83FaUnnk3nTVntiZkWpAbFEytmnRvfFQjmFFm2nIzE+/Z3XWPFMgB+cvDRHjjk80JaK3/ezYVm7bTmmS8QqkJZasM1frC3mpJzG5h/dNUI0nmBsJk40kcTndtER8DhqF1mIcil1tm8c5OY1PVUpBaLqosI4cf4nU6EfIyI+4D7g5cqYpVSTpTIqyg/l2G1leHYqRIffTTgl4ZyNJoikFnlPXbLCOh6XcNPqbivhariP5Z2B+XaZg9edqpvj8xDwuorG/edzUk5j8z88P8VUOJ7qcWD1PBibjRJPTBXc3i7lUursPHyBidkIx8Zm8bpcLOv043G75g05NUKl2UbCifP/FeBhYCVwCkvt86FKGKVUj0YeFaWTrILROKFYYl5VTiGi8STPnJwgnjAcHQ2SN7jH7RLeePUA24b72LyulzYHckw7dXPyndnEbKSok3Iam0/PVNLrBiJWUblo/od0SDnUQdnn3KruFs5PRzh1KcxVg+189B2FO7CVcp42QgOkWmCnsNtDxpgHgDcaY362CjZVjKUywi0njTYqKtbVyi6XglH2joyz+8gYB46PE85T6Hjdgt/jxudx8f+++Sq2Xtlna79OtfeFnNmxsVlW5dXbSTspp7F5n8eVUS2JWH0OMOQ0X18M5VAH5Z9znS0+gtE43a2+op+nUSrNNhJ2hjJvF5E/AH4X+KcK21MxGnmEW0nqfVSUroiZdvh2SyCnMcZwYjyYSbZ68cxUTjs6l8C1KzpZ3dPK0dFZLoWiRYuk5eN1W01S2vwex9r7Qs7M63JxfjpCZ8tlhVC2k3ISm98w2MGxsRmmQpdj/p1tXtb1tTuyM59yqIMWc841UqXZRsGO8/86MAq0pUo6C1aGb1XbOB4+N83dO/bWpEb9UqYeR0WReIJwNMm3Xz7P5/ce56zNmjlpEknDC6cnM83KT1/KlWMGvC42r+tl23Aft67vpbvVvhzT53HR7veUXAa5kDNb1unn1KVwWZxU2uEt7/KU1eGVI5N8MedcI1aarXfE7rRZRL5qjHl3he0pSveajeaW+/+KWMIsqkzsHQ89RXeLN2exzRjDZCjGdx+4C2jOsFD2jCjbSZRSitfp95heqA1mNTjJll8GvC7CsSTxpOH+uzYUvAHMRuLsP2aFc54+Os50nhxzoN2fKZZ20+puW+GPfSPjPH7gJOenwqzqaeFX7hzmTdcuc/6FFODuHXvnOLNgNI7P7aK71VcWJ5Xd46CeHF6hc24yFGOg3c90JF7wnKnEedosiMhBY8ymOc87jZnWiu41G80bPvJZgtE4gx0BHrvnNkfvL3axpffVzCdXOZ2Ene8xrbm/HLufqxj+zS8/O6cJSSiWoK/Nz5++/0YAzk2FM8lWz568RDwvJHTlYDvbhvrYdmUfGwbbbWfXelwufnBigj/55iv4UrPFcp8P831PwJIfhGSfc20+N2OzUTpbvPNee/V6M6t3Snb+IvJe4CFgEDLZ2FUL+6Sdf/5o3S4LOaWFbg6KPYp9jwPtfnb8wiaCkfk195n9/PVeOgOeVOK/RdIkmQjG+LHrV7D7yBgjF2dz3uN1W3LMbcP9bB3qZdCBHNPjctHmvxy/r8b5UMiZAfOep0txdqrXXmUp5vydSD3/BPhxY0xNtf2VqlFf7wufdqm1c8j+HpPGkEwa3CIcG5tlNK+y5Xyk2w/6PS6C0QSzkTjTkThJA1/ceyKzXWfAw21DVjhn07qeHAeyEF63iza/h9YC2bXVOB8KLeDevWNv0bUpYEmKFtLf9XQ4xsVpq8ib1yVM5jW2UcqLE+d/vtyOX0TcwAHgtDHmnQttH4zGK1ajvh4XPp1Sa0VTMmm4oquF89MhAh5PRoYZiiVY3mm/Rv34bJThgTZePjdFNJ4kf46wpreVdX2tnLkUZioc5cJUhIDHbcvxp/X3rT7PvHH/Wp0P8910lqpoYXVPK8fGZhibiSFiyWZjScN0OK5VPiuI03r+X8bq3JUZwhlj/rmE49+PlSW8YOgokTRFG3OXg6UgB6u2c8iP3UfiSd77+pU8/NSrJJPxnIXaD2xePe9+jo0FU/H7UV4+Oz3H4bf53PzIVQO8f/Nqzl4KZxaDu1q8BRuopElXx2xLFUuzW0Z5vvOhkrOr+W46S2V2ms+9dw5x7xcPYjC4EEwq9aKn1Zs5d2s9o12KOHH+nUAQ+NGs5wywKOcvIquAdwB/DPzmQttfvbyjovG/pSAHq7RzSDv7cCxdHC05J3a/ZaiX+9mwYGPxeCLJcyk55p4jY5ydDOe83upzs2ldD7cP97NlfS9dWZ/rU996tWADlcf3n2TLUG/G4bf7PQXr59ih2PkAlQ29zHfTeXTXSMPPTguxfeMg7X434Vgyk5PQ3x6gI+Dh1ESw5jPapYqTev4fLPOx/wz4baCj2AYicg9wD8CaNWvKfPi5NHozlEqEKtKa+1DK4dsRCGwZ6i0ox5wJx3n66Di7j4yy79g4s5Fclc9gh59tKTnmjau78RYZpWc3UEkT8Lo4Px2mv8NP2yIdfj5OY/LlOHcWGoRUc3a6mNH2YkfoVy3rLLjou6qndcmGu2qNnfIOv22M+RMR+QuYMxvHGHOf04OKyDuBC8aYgyKyvdh2xpgdwA6ATZs2NYYmtYaUI3QViVtlE8IpCabTjNp8zlwKWaP7kTGeOzU5Z39XL+tg25V9bBvqY2igzZYcM70Y3OJz4xLBJUI4FmddXxudAe+C7y+FWi0Ep5+v1ux0sf0DFjtCn+/c/YOvvrAkw121xs7IP73Ie6CMx70deJeIvB0IAJ0i8kVjzM+V8RhNx2Kcg9WByqpvv5jyCfkkjeHls1MZ/f2xsdwL1OdxcfOabrYN93HbUB/97X5H+xcRfmHbWv73t35IPJHMaPDjSaqyPuN0dlXuWHW1ZqeLGW2XMkKf79xdvavxxRj1yILO3xjzb6m/fz/fdiLyF8aYD9s5qDHmd7FqBZEa+f+WOv75setEFnIO0XiScDxBeJG1cgoRiiU4dPxys5OJYK5Er7vFm8muvXltT07ilh1ExFLopBZt1/e30dPqq8n6THqEenE6zHQ4TiSexO0S3n3jFXO2beRY9cmJIG6BkYszWXF4X8Xq70Dxc3cpiDHqEUfNXBbg9jLuS8miFCeSXTohHE0STzore1yMsZkIe0as+P2hE5fmlFNe29fK7cN9bBvuZ+OKDtvNTtJIqulJW4GWhlC79ZntGwd536lLPLLzCPFkEr/bRVerlycOneaGVd05NtVTrNrpDKTD7+HVCzO4XYLbJcSThtOXwmwYLF4YrlLy2KUgxqhHyun8F4UxZiews8Zm1DVOnEi6xn0oNrddYSkYYxgZnc2Ecw6fm8553SVww6ouK7t2uI+V3fZ1/WlELAVPm99qfJLv8OuFPSPjrOppmbM4mf971Eqame/otw718sSh044GD5mF/fTE0OQ9X4BKjtAbXYxRj9Tc+SsLM58TyXb24ZTWvlz1mmKJJM+evJQZ4Z+fys3QbfO52bLeqo65ZX0vHYtcbG1JjfDLpdKpNHadei0SxQrNEh/ZeYTeNi9dLVa5CzszkJlogpXdAUZnopmwz/J2P7PR4oMJHaE3FuV0/vV/1TYo+U4kaQyzkTgDHX6OjQXL5uwBpkIx9h0bZ/drY+w/Nj7nYl/eGcjIMa9f1VVUjrkQPo+LDr+XNr/9xKt6wa5TX8xIuNQF4kKzxETSMBmM0d9+udbRQjOQ9GccGrgc5knX25kPHaE3Dradv4gEjDHhvOf6jTGjqYcPl9WyeWi2bL9fumMdH3/yJeKJKD6P1Ws2njT89C2ry+L4T0+E2H1klN1Hxnj+9CT5a8DXrOhIOfx+1vW12q6Omc2+kXG+fOAk56bCrOlt5Vd/ZLiuf7P5zjG7Tt3pSLgcC8SFZiV+j4twPPcmvtAMRBdZlz5Oqno+D/yyMWZv6vFPAp8wxlxVQfsybNq0yRw4cKApSi8nk4ZwPEEwarUsjCWSVm35BbJm7ZJIWnLMdHbt8fHcEaDf4+KWtT0ZOWZvm/1mJ/n4PC5+cPwSD33jMD6PqyF+MzvnWCXKC5ejumWhfZwcn2UyHMctgt/joiPgwedxL/j9awnlpUE5SjpfD3wOa3H2CqAP+K/GmFNltLMoaee/VMu/ppOqgtEEu354kcf3neTslLMOVvMRiiY4cHyC3UdGeXpknEt5FRN723zcNmTF729e07NgW8L0zaiQjeluV+niaY32m9XK3vyGQ1OhGKMzEcLxJFvW9drOsM2+cY3ORLg4E6Ur4LHWhBJJPC4XH9o+zH1vrsq4TakxJZd0NsY8LyJ/DHwBmAburJbjz2apFLeKJVKKnNToPl0jJ7uDVWfAM2/RsoW4OB1hz4ilznnmxASxRO6Nfn1/WyZ+f/Vy+3LMQjb++VOv8vuBa/jR1y2fsw7QaL/ZYuwtRygyey1hKhTjzKTVftLvFtshoPxQUzCaYLDDlxPvD0bj7BkZx3FqvrKkcBLz/xtgGLgBuAr4NxH5tDHmkUoZV4hGLb0cTyQJpypghmNWKKcQj+8/OW/RsvkwxvDahZlM79pXL8zkvO52CTet6mLrcD/bhvtY3mW/2UkhG9NF0/wey8YvPn2CdxRIdmq032wxWbzlSObKjrOPzljKKkEY7Aw4zpZNb5OeTWRTzzdepXo4Ufu8gBXmMcBREbkN+NPKmFWcRlmISqaSq9Kj+2LOPp9iRcvOTYUKbh+NJ3n21CV2v2Y5/IszuXLMdr+H24Z62TrUx+b1vbT7SxN4tfjcXJgO09PqxeW6PMKfz6E0ym+Wxqm95Urmyh61HxsL4ndbjj8toV2M0260G69SPZyEfT6V93gS+KWyW7QA9aolTi/ShqIJwvHkopOrMkXLsmLu4VgypxnKZDDG00ctZ7//2AShvGNd0W3JMbcO9XH9yq6SpZT5Ovy1fW0ph3J5v/M5lHr9zYrh1N5yhrXSo/ZC6w6LcdqNduNVqoeTBd8NwCeAa7GKsQFgjKnKWZRe8K0nwqlRfbCMmbTZ8fTsZig/s3kN09E4e46M8uKZqTlyzDafmzdsGOD9m1expndxcsxs0jr89sDcxKtmUFw5oRILxOX8jlW109yUQ+3zPeBjwKeAHwc+mHr/x8ppaDHqwfnHsxdpy1QUrRD7RsZ5bN8Jq7iWy4XBMDoTzdlGsDLu3QL97T58HjfxpOH+u5wvDKdJ97Rt87vxe+ZX+6hDuUylbob6HSvloBzO/6Ax5hYRed4Yc33que8aY95QZlsLUgvnny6dEIzGCcUSc4qXLZZiMslgNM7+YxPsSVXHnArHc97X1+7jyv52fnhhmplIzPL+ImBgsNOPS4S+Nj9/+v4bbdvicbmsWjp+z4LyTqU46qiVeqVkqScQFhEX8KqI/DpwGlhyZ3e6c1UwFiccW7hOznx692LbZ8skz0+H+B9fe5nlnQGOjs3OkWNeOdBuxe+H+9iwrJ3f+sfnaPd7mA7HcIkgIiQxjM9GWdXTklkYns+u9Ai/1eduKodfycxwLWugNBpOnP9/A1qB+4A/At4I/JcK2FRVSil5vBhN/mP7TpBMGmZjCS5MW4XYAKbClizT4xJev6abrUOWw1/WmSvHTKuBvG4X8YRBxBr8xxLJzMJwMR3+7/mv4S2vW7ZgSGcp0si19RWlEjhx/gYrwWstkJY2/DWW7r/uKDbKy1bllBrKsavJj8aTHDphhXOePzO3do5LrAXW337rRjav66FtHjlmWg3U0+rjwnQY615lcIlVc/0Dm1fn6PBdAp0tVj2gL+07wTtvmqvDbwbqqba+otQDTpz/l4CPAM8D5Ql+V4jsUV5XwMO5qRC//68v8Jtv2cDNa3vLVgVzPk3+RDDK3lQp5IPHJgjn3WS8bqE9JZ8EQ397gO1XDyx4zA9sXp0Z1Q92+BmdjRJPwLreVu55wxBvuHqAP3/qVUc6/Gag0bKMFaXSOHH+F40xT1bMkjJhjOEzO4/gEmsxM5Y0eF0u4pLgC3tO8Po1PWU7VrYm3xhDNGG4FIoSTxje95d7crrduwSuu6KLVd0tHDg+TsDrzpJyWk7dDluGermfDZkib9cu7+Jnb13DW65bRpvfCgc51eHbodErqWqyk6Lk4sT5f0xEPgt8G8ikkRpj/rnsVjkgrcgJxxJWb9pYkuPjs3QGPDkj/PmyZBfLT92yiv/9n68wEYwSiSfnLNa2eN1sXmdVx7x1fR9drdbIs9QKnVuGetl2ZT/tgcKyzHIn9iyFeLkmOylKLk6c/weBjVjx/nQMwwBVd/6RrJh9IUWOnSzZxTITibP/6Di7j4zx9NFxZiK5csyuFi/brxpg63AfN63uxueZm12bdvQ7dh3hxbOTfPTJSVb3WGGb+W4CHpeLVr+b9gVkmYupIz/fqH4pxMsbLctYUSqNo3r+aX1/LXj9LbeYb3zn+7aSq4plyS42AersZCjTu/bZU5Nzjn/VsvZMOYUrB9sXzK7dNzLOQ984zFQoRjp5Nmmgs8XLA2/dmGOjXYe/WOwkKOWXGgZrxjUZivHdB+4qu03NTDnDa40eqlPKQzl0/ntF5FpjzEtltMs28YSZM8ouRn5c3GloJWkMr5ybzjQ7GRmdzXnd6xZuXtPD1pTDH+jwO/osj+8/yWw0jkvkcpPyVGvGx/ef5LbhPtr8Htr9Hlp8lZVl2hnVa7y8OpQzvLYUQnVKZXHi/O8AfkFEjmLF/AUwxpi6lHpuGep1NMoPxxIcOjGRcfgTwdxmJ10tXqs65nAfm9f2luSUz06FSCZNTv18EUgkDBdnwqxdZKvExWBHBaPx8upQzvDaUgjVKZXFifN/W8WsqBHjs1H2ppqdHDw+kUm4SrO2tzUzur/2is45Bc4Wy4rOFiaCUUhaTh/AGCvzdk1vW0HHX6kpvJ1RvcbLq0M55agqbVUWwklJ5+OVNKQaGGM4Ojqb6W718tnpnNddAtev7GJrqrtVJcIabpfwwdvX8eD/eZFLwVR9HqyYf1eLp+BoupJTeCfNyNXZV5Zyhtc0VKcsRGmdPRqAeCLJc6cmM92tzk2Fc15v9bnZvK6X26/sY8u6XjrzRkvFcFLTR0RoS9XEb/W5WdvXRleLl09+7WWOjlkjsQ0DbTzwto1zHOzOwxe47/FnmI3GCXjcDHT46Qh4yzaF11F9/VDO8JqG6pSFsK32qTXX33Sz+eq3dtnadjocY19Kjrnv2Dizkdxa+8s6/Wwdskb3N67untNzdiHsqolafZYOv83nubyw64D0iP/MpRCWiYIxVrOWdr9H1TZLkHJWB9VKowqUR+1T15y+dFmO+dypS3Pq52xc3pEJ5wz1F46r22W+mj5vuHqA9pRSp9Q1gvSind9jFXEzWAXcjo8F8XtcrO9vK2n/1UalhwtTzvCahuqU+WhY559IGg6fm8qEc46P5S5k+Twubl7TzbbhfrYO9dLX7kyOOR/5NX1EhDa/m9GZMCu7S08kS5NetOtv93P6Uoh41h0tnjRcnImw8/CFhrjAVXqoKPVFQzn/UCzBoeOWHHPvyFw5Zk+rN1MK+Za1PRWrVb+is4XxYCQTznGJEIzGWd1b3pF4etGus8XLuckQCbFUQS6Bld0teNzSMNI9lR4qSn3RMM7/9ESI93xm95wSzOv6LDnm7cP9bFzRkaOdLzcuEdr8Hn51+xB//B+HiSaStLjcBKPxiiymZS/aJYzB6xIMcEVXC50tXowxnJoINkQ4RaWHilJf1MT5i8hq4PPAcqw6QTuMMQ/P957ZaJzOeBKXwA2rurn9Skt/f0UZwyxFbKXVZ5VXaPW5ERHe+roV+D3uii+m5SpxQojAso5ARpEUiiVo87kbIpyi0kNFqS9qovYRkRXACmPMIRHpAA4CPzFf6Yj+ddeYT3z+39myvoeOgD05ZikEvO5MiYVyJXeVQrEaPG0+N9FEMsepBqNxBjsCPHbPbTW0OJdKNTlXitMIM0Kl8hRT+zjTOJYJY8xZY8yh1P+ngZeBlfO9Z0V3C2+6ZrCijt/rdtHb5mN1bytXdLfQ1eKtC8cPqVnAu65jsCPAZCjGYEeAB991HdOReE71UqjPcEox+9UZVYb0zfbCdDhnRrjz8IVam6bUCTWP+YvIOuD1wNMFXrsHuAfgilX2mp04xeNy0eZ30x7w1H1v20LSvdW7GiecotLD6qEL7MpC1NT5i0g78BXgvxljpvJfN8bsAHaAleRVbD9Osm3BKrGQDulUShFULZZSJqeGKcqHLrArC1GTsA+AiHixHP+XSukGls62HZuN0BnwMDYb4eGnXmXfyHjOdi4R2gMelncFWNPbSn+7v+EdPyydcIqGKcrL6p5WQrHczPZ6nREqtaFWah8B/gZ42Rjzp6Xsa75s2y1DVunldKP0xZRYaASWQjhFwxTlZSnNCJXKUKuR/+3AzwN3icgPUv/evpgdnZ0KEfDmfowWr5uL02HW9LayoquFjoB3yTr+pcLJiWBDLFw3CktlRqhUjpqM/I0x38NqBlMy6X69rT4PLgGXSwjHEqzpa8PjsGBbrciPdW8d6mXPyHhTxb41D6D8LIUZoVI5GsM7FkFE+H+2rcMA8WQSd8rxN9L0Nj/WfWxshoefeo2jozNNFfu+984hYglDMBrHGFOxrGlFUSxqLvVcDH6vm46Ah3afh/X9bXS3ehu2dG1+rHsqFMclMB2OM9ARaJrYt/YVUJTq0jDOX7D66HYEvPg8uROWRp7e5kvyogmrhEU0cbmGUbPEvhv5d1SURqNhwj4+j4u+dv8cx9/o5EvyfG4XSWP9TaOxb0VRys3S8qQNSH6su7PFQ9JAR8CjsW9FUSqGOv8aky/JW9fXzv13Xcn6/naV6CmKUjEaJua/lCkU676vRrYoitIc6MhfURSlCVHnryiK0oRo2EdpaipZSVSrlCr1jI78laalkpVEtUqpUu+o81ealuzsaqtXswevW3h010hd71tRyoE6f6VpqWQlUa1SqtQ76vyVpqWSDU+0mYpS76jzV5qWSlYS1SqlSr2jzl9pWirZ8ESbqSj1jhhTtC96XbFp0yZz4MCBWpuhLIJqSB5VVqkohRGRg8aYTfnP68hfqSjVkDyqrFJRnKPOX6ko1ZA8qqxSUZyjzl+pKNWQPKqsUlGco85fqSjVkDyqrFJRnKPOX6ko1ZA8qqxSUZyjzl+pKNWQPKqsUlGco1JPRVGUJYxKPRVFUZQM6vwVRVGaEHX+iqIoTYg6f0VRlCZEnb+iKEoTos5fURSlCalZA3cReRvwMOAGPmuM+WStbKkFWoWycdDfSlmK1GTkLyJu4BHgx4BrgbtF5Npa2FILtApl46C/lbJUqVXYZwvwmjFmxBgTBR4H3l0jW6qOVqFsHPS3UpYqtXL+K4GTWY9PpZ7LQUTuEZEDInLg4sWLVTOu0mgVysZBfytlqVIr5y8FnptTZ8IYs8MYs8kYs2lgYKAKZlUHrULZOOhvpSxVauX8TwGrsx6vAs7UyJaqo1UoGwf9rZSlSq2c/35gg4isFxEf8AHgyRrZUnW0CmXjoL+VslSpidTTGBMXkV8HvoEl9fycMebFWthSK7ZvHFQH0iDob6UsRWqm8zfG/AfwH7U6vqIoSjOjGb6KoihNiDp/RVGUJkSdv6IoShOizl9RFKUJaZgeviIyDbxSazvmoR8YrbURRahn20DtK5V6tq+ebYPmsG+tMWZOlmzN1D6L4JVCTYjrBRE5UK/21bNtoPaVSj3bV8+2QXPbp2EfRVGUJkSdv6IoShPSSM5/R60NWIB6tq+ebQO1r1Tq2b56tg2a2L6GWfBVFEVRykcjjfwVRVGUMqHOX1EUpQmpK+cvIm8TkVdE5DUR+Z0Cr4uI/Hnq9edE5OY6s+9nU3Y9JyK7ReTGerIva7vNIpIQkffVm30isl1EfiAiL4rI/19P9olIl4j8m4g8m7Lvg1W07XMickFEXijyeq2vjYXsq9m1sZBtWdvV6rpY0L6KXBfGmLr4h1Xa+QgwBPiAZ4Fr87Z5O/A1rE5gtwFP15l924Ce1P9/rN7sy9ruKayKqu+rJ/uAbuAlYE3q8WCd2fd7wEOp/w8A44CvSvbdCdwMvFDk9ZpdGzbtq+W1Ma9tWb9/1a8Lm99dRa6Lehr522nq/m7g88ZiL9AtIivqxT5jzG5jzETq4V6sDmXVws73B/Bh4CvAhSraBvbs+xngn40xJwCMMdW00Y59BugQEQHasZx/vBrGGWN2pY5XjFpeGwvaV8trw8Z3B7W7LuzYV5Hrop6cv52m7rYav1cIp8f+JayRWLVY0D4RWQm8B/irKtqVxs73dxXQIyI7ReSgiPyXqllnz75PA9dgtRx9HrjfGJOsjnkLUstrwynVvjbmpcbXhR0qcl3UU3kHO03dbTV+rxC2jy0ib8Q6we+oqEV5hy3wXL59fwY8YIxJWIPXqmLHPg9wC/AmoAXYIyJ7jTE/rLRx2LPvrcAPgLuAYeBbIvJdY8xUhW2zQy2vDdvU6NpYiD+jdteFHSpyXdST87fT1L2Wjd9tHVtEbgA+C/yYMWasSraBPfs2AY+nTvB+4O0iEjfG/Gud2HcKGDXGzAKzIrILuBGohvO3Y98HgU8aK/D6mogcBTYC+6pg30LU8tqwRQ2vjYWo5XVhh8pcF9Vc2Fhg0cMDjADrubzgdl3eNu8gd1FrX53ZtwZ4DdhWj99f3vZ/R3UXfO18f9cA305t2wq8ALyujuz7S+Djqf8vA04D/VX8DtdRfFGwZteGTftqdm0sZFvedlW9Lmx+dxW5Lupm5G+KNHUXkV9Jvf5XWCvxb8c6iYJYI7F6su8PgT7gM6lRRNxUqWKgTftqhh37jDEvi8jXgeeAJPBZY8y88rxq2gf8EfB3IvI8lpN9wBhTlXLAIvIYsB3oF5FTwMcAb5ZtNbs2bNpXs2vDhm01ZSH7KnVdaHkHRVGUJqSe1D6KoihKlVDnryiK0oSo81cURWlC1PkriqI0Ier8FUVRmhB1/krDISLLROQfRGQkle6+R0Tek3ptu4hMisgzqQqdu0TknVnv/biInE5VSHxBRN5Vu0/iDBH5DxHpTv37tVrbozQ26vyVhiJVVO1fgV3GmCFjzC3AB8gtFPZdY8zrjTFXA/cBnxaRN2W9/iljzE3ATwGfE5GyXQep0soVua6MMW83xlzCqvKozl8pCXX+SqNxFxDNTs4xxhw3xvxFoY2NMT8AHgR+vcBrL2NV5ezPfj41O/iCiDwlIq+KyC9nvfYREdmfqkv//6WeWyciL4vIZ4BD5JZZSNeJ3y1WH4B9ItKRes93ReRQ6t+21LbbU7OVfxGRl0Tkr9I3ExE5JiL9wCeB4dTs5X+KSLuIfDu1n+dFpFA1V0XJoW4yfBXFJtdhOVgnHAI+kv+kiNyKlTF5scB7bsAqk9AGPCMi/w68DtiAVf5ZgCdF5E7gBHA18EFjTM6IXER8wJeB9xtj9otIJxDCKh38FmNMWEQ2AI9h1Zghtf9rgePA14H3Ak9k7fZ3sNL7b0odwwO8xxgzlbo57BWRJ41mcCrzoM5faWhE5BGsCpFRY8zmYpvlPf4NEfk5YBrLKRdykl81xoSAkIh8B8sh3wH8KPBMapt2rJvBCeC4sero53M1cNYYsx/ApCqAikgbVjjqJiCBVbY3zT5jzEhqu8dSx812/oU+3/9I3YiSWKWclwHn5nmP0uSo81cajReBn0w/MMZ8KDXaPTDPe14PvJz1+FPGmP+1wHHybwgGy8l+whjzaPYLIrIOmC2yHymwL4DfAM5jVWd0AeEFjj0fP4vVWewWY0xMRI4BgQXeozQ5GvNXGo2ngICI/GrWc63FNk6VEf4o8IjD47xbRAIi0odVdGs/VtG3XxSR9tS+V4rI4AL7OQxcISKbU+/pSIVpurBmBEng57GKyaXZIiLrU7H+9wPfy9vnNNCR9bgLuJBy/G8E1jr8rEoToiN/paEwxhgR+QngUyLy21jx+lnggazN3iAiz2DdFC4A9xljvu3wUPuAf8cqRfxHxpgzwBkRuQarmQbADPBzWGGbYvZGReT9wF+ISAtWvP/NwGeAr4jITwHfIXfmsAdrUfd6YBfwL3n7HBOR74vV8PtrwEPAv4nIAaxmM4cdflalCdGqnoqSh4h8HJixERqqxLG3A79ljHnnApsqSklo2EdRFKUJ0ZG/oihKE6Ijf0VRlCZEnb+iKEoTos5fURSlCVHnryiK0oSo81cURWlC/i8/Aw4tmeodqwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x, np.log(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "88e09c08",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\hp\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Healthy life expectancy', ylabel='max_infection_rate'>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a= data[\"Healthy life expectancy\"]\n",
    "y = data[\"max_infection_rate\"]\n",
    "sns.scatterplot(a,np.log(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "83ca3c1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\hp\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Healthy life expectancy', ylabel='max_infection_rate'>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(a, np.log(y))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
